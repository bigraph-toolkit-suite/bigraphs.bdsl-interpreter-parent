signature Sig1 {
	active ctrl a arity 1
	passive ctrl b arity 1
	atomic ctrl c arity 1
}

signature Sig2 {
	ctrl d arity 1
	ctrl e arity 1
}

main = {
    val baz(Sig1) = {a}
    react foo(Sig1) = {a}, {a}
    println($baz)
    brs fobazbrs2(Sig1) = {
        agents = [$example],
        rules = [$testReact1]
    }

    brs brsVar1 = $fobazbrs2
}

brs fobazbrs(Sig1) = {
    agents = [$example],
    rules = [$testReact1]
}

val example(Sig1):Sig1.a = { a | b | b }

react testReact1(Sig1) = {
    $example
}, {
     $example
 }

 react testReact2(Sig1) = {
     $example
 }, {
     load(sig=Sig1, as=xmi, resourcePath="classpath:models/test.xmi")
 }

val bla(Sig1) = load(sig=Sig1, as=xmi, resourcePath="classpath:models/test.xmi")

$example = load(sig=Sig1, as=xmi, resourcePath="classpath:models/test.xmi")

$example = $bla



//react testReact1(Sig1) = {a}

//$testReact1 = {a}

//react testReact1(Sig1) = load(sig=Sig1, as=xmi, resourcePath="classpath:models/test.xmi") // OK

/*
react testReact1(Sig1) = {
    load(sig=Sig1, as=xmi, resourcePath="classpath:models/test.xmi")
}, {
    load(sig=Sig1, as=xmi, resourcePath="classpath:models/test.xmi")
}

react testReact1(Sig1) = {
    a | b
}, {
    a | b
}

val bigExplicitRoot(Sig1) = {
	a | b | b
}

val bigExplicitRoot2 = load(sig=Sig1, as=xmi, resourcePath="classpath:models/test.xmi")

val bigTest = $bigExplicitRoot

val bigSig2(Sig2) = {
    d | e
}



val baz = {
    Sig1.a
}

*/